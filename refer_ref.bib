% 有时候显示不全，给中文/英文多加上 {} 就行了。
@article{10.1145/3371038,
    author     = {Vieira, Marcos A. M. and Castanho, Matheus S. and Pac\'{\i}fico, Racyus D. G. and Santos, Elerson R. S. and J\'{u}nior, Eduardo P. M. C\^{a}mara and Vieira, Luiz F. M.},
    title      = {Fast Packet Processing with eBPF and XDP: Concepts, Code, Challenges, and Applications},
    year       = {2020},
    issue_date = {January 2021},
    publisher  = {ACM},
    address    = {New York, America},
    volume     = {53},
    number     = {1},
    issn       = {0360-0300},
    url        = {https://doi.org/10.1145/3371038},
    doi        = {10.1145/3371038},
    journal    = {ACM Computing Surveys (CSUR '20)},
    month      = feb,
    articleno  = {16},
    pages      = {1--36},
    keywords   = {packet processing, network functions, Computer networking}
}
@inproceedings{10.1145/3674213.3674219,
    title     = {Dynamic Fixed-Point Values in {{eBPF}}: A Case for Fully in-Kernel Anomaly Detection},
    booktitle = {Proceedings of the Asian Internet Engineering Conference 2024 (Aintec '24)},
    author    = {Osaki, Atsuya and Poisson, Manuel and Makino, Seiki and Shiiba, Ryusei and Fukuda, Kensuke and Okoshi, Tadashi and Nakazawa, Jin},
    year      = {2024},
    pages     = {46--54},
    publisher = {ACM},
    address   = {Sydney, Australia},
    doi       = {10.1145/3674213.3674219},
    url       = {https://doi.org/10.1145/3674213.3674219},
    urldate   = {2024-12-15},
    abstract  = {eBPF and XDP are promising technologies that are capable of accelerating packet processing inside the Linux kernel. Despite these benefits, eBPF is constrained by a number of rigorous restrictions that are imposed to protect the kernel. One such restriction is the lack of support for floating-point values, which was introduced to achieve faster execution and avoid non-deterministic behavior. However, this has become a significant obstacle to expanding the functionality of eBPF programs with advanced algorithms. In this paper, we propose dynamic fixed-point as a solution to overcome this challenge within the restrictions of eBPF. Dynamic fixed-point values are an expansion from traditional fixed-point values, with the bit allocation adjusted dynamically. Benefit of dynamic fixed-point is that the accuracy of calculations are improved, which is one of the critical shortcomings of fixed-point. To demonstrate the effectiveness of our approach, we have designed and implemented a prototype of an entropy-based traffic anomaly detection framework and have reported on its throughput and the detection accuracy. Our prototype, which employs dynamic fixed-point, has achieved an 18\% improvement in throughput while also matching the detection accuracy of a similar system that employs floating-point values in user space.},
    keywords  = {Anomaly Detection,DDoS,Dynamic Fixed-point,eBPF,XDP},
    series    = {AINTEC '24}
}
% 不知道的直接放美利坚
@inproceedings{258973,
    author    = {Marco Spaziani Brunella and Giacomo Belocchi and Marco Bonola and Salvatore Pontarelli and Giuseppe Siracusano and Giuseppe Bianchi and Aniello Cammarano and Alessandro Palumbo and Luca Petrucci and Roberto Bifulco},
    title     = {{hXDP}: Efficient Software Packet Processing on {FPGA} {NICs}},
    booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI '20)},
    year      = {2020},
    pages     = {973--990},
    publisher = {USENIX Association},
    address   = {New York, America},
    url       = {https://www.usenix.org/conference/osdi20/presentation/brunella},
    month     = nov
}
@inproceedings{286467,
    title     = {Electrode: {{Accelerating}} Distributed Protocols with {{eBPF}}},
    booktitle = {20th {{USENIX}} Symposium on Networked Systems Design and Implementation ({{NSDI}} '23)},
    author    = {Zhou, Yang and Wang, Zezhou and Dharanipragada, Sowmya and Yu, Minlan},
    year      = {2023},
    month     = apr,
    pages     = {1391--1407},
    publisher = {USENIX Association},
    address   = {Boston, America},
    langid    = {american}
}
@inproceedings{9110434,
    author    = {Cassagnes, Cyril and Trestioreanu, Lucian and Joly, Clement and State, Radu},
    booktitle = {2020 IEEE/IFIP Network Operations and Management Symposium (NOMS '20)},
    title     = {The rise of eBPF for non-intrusive performance monitoring},
    year      = {2020},
    publisher = {IEEE},
    address   = {Budapest, Hungary},
    pages     = {1-7},
    keywords  = {Connectors;Protocols;Linux;Production;Containers;Software;Performance analysis;Performance;Cloud computing;Interledger;eBPF;Profiling;Tracing},
    doi       = {10.1109/NOMS47738.2020.9110434}
}
@inproceedings{AcceleratingMemcachedUsingSafeinKernCache,
    title     = {{{BMC}}: {{Accelerating}} Memcached Using Safe in-Kernel Caching and Pre-Stack Processing},
    booktitle = {18th {{USENIX}} Symposium on Networked Systems Design and Implementation ({{NSDI}} '21)},
    author    = {{Yoann Ghigoff} and {Julien Sopena} and {Kahina Lazri} and {Antoine Blin} and {Gilles Muller}},
    year      = {2021},
    month     = apr,
    pages     = {487--501},
    publisher = {USENIX Association},
    address   = {New York, America}
}

@misc{AFLFuzzWhitepaper,
    author = {Michał Zalewski},
    title  = {American Fuzzy Loop Whitepaper},
    url    = {https://lcamtuf.coredump.cx/afl/echnical_details.txt},
    year   = {2016}
}

@manual{ArmISAmanual,
    author  = {{Arm Limited}},
    title   = {Arm A-profile A64 Instruction Set Architecture},
    year    = {2025},
    address = {110 Fulbourn Road, Cambridge, England},
    month   = mar
}

@misc{ArmMTEWhitepaper,
    author = {{Arm Limited}},
    title  = {Armv8.5-A Memory Tagging Extension Whitepaper},
    year   = {2018}
}

@techreport{ARMPA,
    author      = {Mark Rutland},
    institution = {{Arm Limited}},
    title       = {ARMv8.3 Pointer Authentication},
    year        = {2017}
}
@manual{ArmRegistersProfile,
    author = {{Arm Limited}},
    title  = {Arm Architecture Registers Armv8, for Armv8-A architecture profile},
    year   = {2020},
    url    = {https://developer.arm.com/documentation/ddi0601/2024-12/AArch32-Registers}
}
@mastersthesis{attackAndDefenseOnEbpf,
    author  = {刘骐瑞},
    school  = {浙江大学},
    address = {浙江杭州},
    title   = {面向 eBPF 字节码的攻防研究},
    year    = {2024}
}

@techreport{AzureeBPFTEE,
    author      = {{Archana} and {Mayank}},
    institution = {Microsoft},
    address     = {},
    title       = {Azure Confidential Computing Meets eBPF},
    year        = {2024}
}
@mastersthesis{bankowskiDynamicLinkingWebAssembly2021,
    title   = {Dynamic Linking in {{WebAssembly}}: {{Architecture}} and {{Performance Evaluation}}},
    author  = {Bankowski, Victor},
    year    = {2021},
    month   = nov,
    address = {Helsinki, Finland},
    langid  = {english},
    school  = {University of Helsinki}
}
@inproceedings{bensonNetEditOrchestrationPlatform2024,
    title      = {{{NetEdit}}: {{An Orchestration Platform}} for {{eBPF Network Functions}} at {{Scale}}},
    shorttitle = {{{NetEdit}}},
    booktitle  = {Proceedings of the {{ACM SIGCOMM}} 2024 {{Conference}} (SIGCOMM '24)},
    author     = {Benson, Theophilus A. and Kannan, Prashanth and Gupta, Prankur and Madhavan, Balasubramanian and Arora, Kumar Saurabh and Meng, Jie and Lau, Martin and Dhamija, Abhishek and Krishnamurthy, Rajiv and Sundaresan, Srikanth and Spring, Neil and Zhang, Ying},
    year       = {2024},
    month      = aug,
    pages      = {721--734},
    publisher  = {ACM},
    address    = {Sydney, Australia},
    doi        = {10.1145/3651890.3672227},
    urldate    = {2024-12-01},
    langid     = {english},
    keywords   = {ebpf}
}

@inproceedings{bhansaliFirstLookCode2022,
    title     = {A {{First Look}} at {{Code Obfuscation}} for {{WebAssembly}}},
    booktitle = {Proceedings of the 15th {{ACM Conference}} on {{Security}} and {{Privacy}} in {{Wireless}} and {{Mobile Networks}} (WiSec '22)},
    author    = {Bhansali, Shrenik and Aris, Ahmet and Acar, Abbas and Oz, Harun and Uluagac, A. Selcuk},
    year      = {2022},
    month     = may,
    pages     = {140--145},
    publisher = {ACM},
    address   = {San Antonio, America},
    doi       = {10.1145/3507657.3528560},
    urldate   = {2024-11-28},
    langid    = {english},
    numpages  = 6
}

@inproceedings{bhuiyanSecBenchjsExecutableSecurity2023,
    title      = {{{SecBench}}.Js: {{An Executable Security Benchmark Suite}} for {{Server-Side JavaScript}}},
    shorttitle = {{{SecBench}}.Js},
    booktitle  = {2023 {{IEEE}}/{{ACM}} 45th {{International Conference}} on {{Software Engineering}} ({{ICSE}} '23)},
    author     = {Bhuiyan, Masudul Hasan Masud and Parthasarathy, Adithya Srinivas and Vasilakis, Nikos and Pradel, Michael and Staicu, Cristian-Alexandru},
    year       = {2023},
    month      = may,
    pages      = {1059--1070},
    publisher  = {IEEE},
    address    = {Melbourne, Australia},
    doi        = {10.1109/ICSE48619.2023.00096},
    isbn       = {978-1-6654-5701-9},
    langid     = {english}
}
@inproceedings{BPFJITFormalMethod,
    title     = {Specification and Verification in the Field: Applying Formal Methods to {{BPF}} Just-in-Time Compilers in the {{Linux}} Kernel},
    booktitle = {Proceedings of the 14th {{USENIX}} Conference on Operating Systems Design and Implementation ({{OSDI}} '20)},
    author    = {Nelson, Luke and Van Geffen, Jacob and Torlak, Emina and Wang, Xi},
    year      = {2020},
    publisher = {USENIX Association},
    address   = {New York, America},
    keywords  = {eBPF},
    articleno = {3},
    numpages  = {21},
    pages     = {41-61}
}

@book{BPFPerformanceTools,
    author    = {Gregg, Brendan},
    title     = {BPF Performance Tools: Linux System and Application Observability},
    year      = {2019},
    isbn      = {0136554822},
    publisher = {Addison-Wesley Professional},
    edition   = {1st}
}

@book{bryantComputerSystemsProgrammers2003,
    title      = {Computer Systems: A Programmer's Perspective},
    shorttitle = {Computer Systems},
    author     = {Bryant, Randal E. and O'Hallaron, David R. and O'Hallaron, David Richard},
    year       = {2003},
    publisher  = {Prentice-Hall},
    address    = {Upper Saddle River, NJ},
    isbn       = {978-0-13-034074-0},
    langid     = {english}
}

@misc{caoWASMixerBinaryObfuscation2023,
    title         = {{{WASMixer}}: {{Binary Obfuscation}} for {{WebAssembly}}},
    shorttitle    = {{{WASMixer}}},
    author        = {{Shangtong Cao} and {Ningyu He} and {Yao Guo} and {Haoyu Wang}},
    year          = {2023},
    month         = aug,
    number        = {arXiv:2308.03123},
    eprint        = {2308.03123},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2308.03123},
    urldate       = {2024-12-11},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {obfuscation,wasm},
    file          = {F:\Zotero\Data-storage\storage\QIKVA3HY\Cao 等 - 2023 - WASMixer Binary Obfuscation for WebAssembly.pdf}
}
@manual{CETspec,
    author = {{Intel Corporation}},
    title  = {Control-flow Enforcement Technology Specification},
    year   = {2019}
}
@article{chaliasosWelltypedProgramsCan2021,
    title   = {Well-Typed Programs Can Go Wrong: A Study of Typing-Related Bugs in {{JVM}} Compilers},
    author  = {Chaliasos, Stefanos and Sotiropoulos, Thodoris and Drosos, Georgios-Petros and Mitropoulos, Charalambos and Mitropoulos, Dimitris and Spinellis, Diomidis},
    year    = {2021},
    month   = oct,
    journal = {Proceedings of the ACM on Programming Languages (PACMPL '21)},
    volume  = {5},
    number  = {OOPSLA},
    pages   = {1--30},
    issn    = {2475-1421},
    doi     = {10.1145/3485500},
    urldate = {2025-01-04}
}

@inproceedings{craunEliminatingEBPFTracing2024,
    title     = {Eliminating {{eBPF Tracing Overhead}} on {{Untraced Processes}}},
    booktitle = {Proceedings of the {{SIGCOMM Workshop}} on {{eBPF}} and {{Kernel Extensions}} (eBPF '24)},
    author    = {Craun, Milo and Hussain, Khizar and Gautam, Uddhav and Ji, Zhengjie and Rao, Tanuj and Williams, Dan},
    year      = {2024},
    month     = aug,
    pages     = {16--22},
    publisher = {ACM},
    address   = {Sydney, Australia},
    doi       = {10.1145/3672197.3673431},
    urldate   = {2025-04-29},
    langid    = {english}
}
@inproceedings{disselkoenPositionPaperProgressive2019,
    title      = {Position {{Paper}}: {{Progressive Memory Safety}} for {{WebAssembly}}},
    shorttitle = {Position {{Paper}}},
    booktitle  = {Proceedings of the 8th {{International Workshop}} on {{Hardware}} and {{Architectural Support}} for {{Security}} and {{Privacy}} (HASP '19)},
    author     = {Disselkoen, Craig and Renner, John and Watt, Conrad and Garfinkel, Tal and Levy, Amit and Stefan, Deian},
    year       = {2019},
    month      = jun,
    pages      = {1--8},
    publisher  = {ACM},
    doi        = {10.1145/3337167.3337171},
    urldate    = {2025-03-21},
    langid     = {english},
    location   = {Phoenix, America}
}
@inproceedings{eBPFANDwasmComparing,
    author    = {Dejaeghere, Jules and Gbadamosi, Bolaji and Pulls, Tobias and Rochet, Florentin},
    title     = {Comparing Security in eBPF and WebAssembly},
    year      = {2023},
    publisher = {ACM},
    address   = {New York, America},
    url       = {https://doi.org/10.1145/3609021.3609306},
    doi       = {10.1145/3609021.3609306},
    booktitle = {Proceedings of the 1st Workshop on EBPF and Kernel Extensions (eBPF '23)},
    pages     = {35--41},
    numpages  = {7},
    keywords  = {eBPF, webassembly, security comparison, threat model, memory safety, control flow integrity, API access, side-channels}
}
@misc{eBPFisa,
    author    = {Thaler, D.},
    title     = {RFC 9669: BPF Instruction Set Architecture (ISA)},
    year      = {2024},
    publisher = {RFC Editor},
    address   = {USA},
    url       = {https://www.rfc-editor.org/info/rfc9405},
    doi       = {http://doi.org/10.17487/RFC9669},
    abstract  = {eBPF (which is no longer an acronym for anything), also commonly referred to as BPF, is a technology with origins in the Linux kernel that can run untrusted programs in a privileged context such as an operating system kernel.  This document specifies the BPF instruction set architecture (ISA).}
}

@inproceedings{eomFuzzingJavaScriptInterpreters2024,
    title     = {Fuzzing {{JavaScript Interpreters}} with {{Coverage-Guided Reinforcement Learning}} for {{LLM-Based Mutation}}},
    booktitle = {Proceedings of the 33rd {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}} (ISSTA '24)},
    author    = {Eom, Jueon and Jeong, Seyeon and Kwon, Taekyoung},
    year      = {2024},
    month     = sep,
    pages     = {1656--1668},
    publisher = {ACM},
    address   = {Vienna, Austria},
    doi       = {10.1145/3650212.3680389},
    urldate   = {2024-12-31},
    isbn      = {979-8-4007-0612-7}
}
@inproceedings{FineIBT,
    author    = {Gaidis, Alexander J. and Moreira, Joao and Sun, Ke and Milburn, Alyssa and Atlidakis, Vaggelis and Kemerlis, Vasileios P.},
    title     = {FineIBT: Fine-grain Control-flow Enforcement with Indirect Branch Tracking},
    year      = {2023},
    publisher = {ACM},
    url       = {https://doi.org/10.1145/3607199.3607219},
    doi       = {10.1145/3607199.3607219},
    booktitle = {Proceedings of the 26th International Symposium on Research in Attacks, Intrusions and Defenses (RAID '23)},
    pages     = {527–546},
    numpages  = {20},
    keywords  = {CFI enforcement, Intel CET/IBT},
    location  = {Hong Kong, China}
}
@misc{finkCageHardwareAcceleratedSafe2024,
    title         = {Cage: {{Hardware-Accelerated Safe WebAssembly}}},
    shorttitle    = {Cage},
    author        = {Fink, Martin and Stavrakakis, Dimitrios and Sprokholt, Dennis and Chakraborty, Soham and Ekberg, Jan-Erik and Bhatotia, Pramod},
    year          = {2024},
    month         = aug,
    number        = {arXiv:2408.11456},
    eprint        = {2408.11456},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2408.11456},
    urldate       = {2024-12-11},
    abstract      = {WebAssembly (WASM) is an immensely versatile and increasingly popular compilation target. It executes applications written in several languages (e.g., C/C++) with near-native performance in various domains (e.g., mobile, edge, cloud). Despite WASM's sandboxing feature, which isolates applications from other instances and the host platform, WASM does not inherently provide any memory safety guarantees for applications written in low-level, unsafe languages.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {accelerate,safe wasm,wasm},
    file          = {F:\Zotero\Data-storage\storage\F8NRFJAS\Fink 等 - 2024 - Cage Hardware-Accelerated Safe WebAssembly.pdf}
}
@misc{FrontEndCompilerCheerp,
    author       = {{Leaning Technologies}},
    howpublished = {\url{https://leaningtech.com/cheerp/}},
    title        = {{An Enterprise-Grade C++ Compiler For The Web}},
    year         = {2024}
}
@misc{FrontEndCompileremscripten,
    author       = {{Emscripten Contributors}},
    howpublished = {\url{https://emscripten.org/}},
    title        = {emscripten},
    year         = {2015}
}
@phdthesis{FuzzOnEBPF,
    type    = {{硕士论文}},
    title   = {{基于模糊测试的eBPF漏洞挖掘技术研究}},
    author  = {{李有霖}},
    year    = {2023},
    address = {四川成都},
    urldate = {2024-11-27},
    langid  = {chinese},
    school  = {电子科技大学},
    file    = {F:\Zotero\Data-storage\storage\6Y5KHP89\基于模糊测试的eBPF漏洞挖掘技术研究_李有霖.pdf}
}
@misc{gbadamosiEBPFRuntimeLinux2024,
    title         = {The {{eBPF Runtime}} in the {{Linux Kernel}}},
    author        = {Gbadamosi, Bolaji and Leonardi, Luigi and Pulls, Tobias and {H{\o}iland-J{\o}rgensen}, Toke and {Ferlin-Reiter}, Simone and Sorce, Simo and Brunstr{\"o}m, Anna},
    year          = {2024},
    month         = oct,
    number        = {arXiv:2410.00026},
    eprint        = {2410.00026},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2410.00026},
    urldate       = {2024-12-24},
    abstract      = {Extended Berkeley Packet Filter (eBPF) is a runtime that enables users to load programs into the operating system (OS) kernel, like Linux or Windows, and execute them safely and efficiently at designated kernel hooks. Each program passes through a verifier that reasons about the safety guarantees for execution. Hosting a safe virtual machine runtime within the kernel makes it dynamically programmable. Unlike the popular approach of bypassing or completely replacing the kernel, eBPF gives users the flexibility to modify the kernel on the fly, rapidly experiment and iterate, and deploy solutions to achieve their workload-specific needs, while working in concert with the kernel.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Computational Engineering Finance and Science,Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\Y5UTW3XB\Gbadamosi 等 - 2024 - The eBPF Runtime in the Linux Kernel.pdf}
}

@inproceedings{gershuniSimplePreciseStatic2019,
    title     = {Simple and Precise Static Analysis of Untrusted {{Linux}} Kernel Extensions},
    booktitle = {Proceedings of the 40th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}} (PLDI '19)},
    author    = {Gershuni, Elazar and Amit, Nadav and Gurfinkel, Arie and Narodytska, Nina and Navas, Jorge A. and Rinetzky, Noam and Ryzhyk, Leonid and Sagiv, Mooly},
    year      = {2019},
    month     = jun,
    pages     = {1069--1084},
    publisher = {ACM},
    doi       = {10.1145/3314221.3314590},
    urldate   = {2024-12-11},
    langid    = {english},
    location  = {Phoenix, America}
}

% volume     = {13},
% number     = {8},
@manual{glibcManual,
    title  = {The GNU C Library (glibc) manual},
    author = {{Free Software Foundation, Inc}},
    year   = {2023}
}

% wasm 标准
@book{groupWebAssemblySpecification2024,
    title   = {{{WebAssembly Specification}}},
    author  = {{{WebAssembly Community}} and {{Rossberg Andreas}}},
    year    = {2024},
    month   = dec,
    urldate = {2024-12-14},
    langid  = {english},
    note    = {standard}
}
@inproceedings{haasBringingWebSpeed2017,
    title     = {Bringing the Web up to Speed with {{WebAssembly}}},
    booktitle = {Proceedings of the 38th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}} (PLDI '17)},
    author    = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    year      = {2017},
    month     = jun,
    pages     = {185--200},
    numpages  = {16},
    publisher = {ACM},
    address   = {Barcelona, Spain},
    doi       = {10.1145/3062341.3062363},
    urldate   = {2024-11-28},
    abstract  = {The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only builtin language of the Web is not well-equipped to meet these requirements, especially as a compilation target.},
    langid    = {english}
}

    % volume     = {1},
@article{hanESFuzzerEfficientWay2024,
    title      = {{{ESFuzzer}}: {{An Efficient Way}} to {{Fuzz WebAssembly Interpreter}}},
    shorttitle = {{{ESFuzzer}}},
    author     = {Han, Jideng and Zhang, Zhaoxin and Du, Yuejin and Wang, Wei and Chen, Xiuyuan},
    year       = {2024},
    volume     = {13},
    number     = {8},
    month      = apr,
    journal    = {Electronics},
    pages      = {1498-1513},
    issn       = {2079-9292},
    doi        = {10.3390/electronics13081498},
    urldate    = {2024-12-11},
    copyright  = {https://creativecommons.org/licenses/by/4.0/},
    langid     = {english}
}

% volume     = {13790},
@inproceedings{HaoValidating,
    author    = {{Hao Sun} and {Zhendong Su}},
    title     = {Validating the {eBPF} Verifier via State Embedding},
    booktitle = {18th USENIX Symposium on Operating Systems Design and Implementation (OSDI '24)},
    year      = {2024},
    address   = {Santa Clara, Canada},
    pages     = {615--628},
    url       = {https://www.usenix.org/conference/osdi24/presentation/sun-hao},
    publisher = {USENIX Association},
    month     = jul
}

@inproceedings{hive,
    author    = {{Peihua Zhang} and {Chenggang Wu} and {Xiangyu Meng} and {Yinqian Zhang} and {Mingfan Peng} and {Shiyang Zhang} and {Bing Hu} and {Mengyao Xie} and {Yuanming Lai} and {Yan Kang} and {Zhe Wang}},
    title     = {{HIVE}: A Hardware-assisted Isolated Execution Environment for {eBPF} on {AArch64}},
    booktitle = {33rd USENIX Security Symposium (USENIX Security '24)},
    year      = {2024},
    address   = {Philadelphia, America},
    pages     = {163--180},
    url       = {https://www.usenix.org/conference/usenixsecurity24/presentation/zhang-peihua},
    publisher = {USENIX Association},
    month     = aug
}
@article{hungBRFFuzzingEBPF2024,
    title   = {{{BRF}}: {{Fuzzing}} the {{eBPF Runtime}}},
    author  = {Hung, Hsin-Wei and Amiri Sani, Ardalan},
    year    = {2024},
    month   = jul,
    journal = {Proceedings of the ACM on Software Engineering (PACMSE '24)},
    number  = {FSE},
    volume  = {1},
    pages   = {1152--1171},
    issn    = {2994-970X},
    doi     = {10.1145/3643778},
    urldate = {2025-01-03},
    langid  = {english}
}

@manual{ierusalimschyLua54Reference2020,
    title  = {Lua 5.4 {{Reference Manual}}},
    author = {Ierusalimschy, Roberto and {Luiz Henrique de Figueiredo} and Celes, Waldemar },
    year   = {2020},
    url    = {https://www.lua.org/manual/5.4/}
}
@book{ierusalimschyProgrammingLua532016,
    title      = {{Programming in Lua: 5.3 edition}},
    shorttitle = {{Programming in Lua}},
    author     = {Ierusalimschy, Roberto},
    year       = {2016},
    month      = apr,
    publisher  = {Roberto Ierusalimschy},
    isbn       = {978-85-903798-6-7},
    langid     = {brazilian}
}
@incollection{infoflowctrforwasm,
    title      = {{{SecWasm}}: {{Information Flow Control}} for {{WebAssembly}}},
    shorttitle = {{{SecWasm}}},
    booktitle  = {Static Analysis: 29th International Symposium (SAS '22)},
    author     = {Bastys, Iulia and Algehed, Maximilian and Sj{\"o}sten, Alexander and Sabelfeld, Andrei},
    editor     = {Singh, Gagandeep and Urban, Caterina},
    year       = {2022},
    pages      = {74--103},
    publisher  = {Springer Nature Switzerland},
    address    = {Cham},
    doi        = {10.1007/978-3-031-22308-2_5},
    abstract   = {We introduce SecWasm, the first general purpose informationflow control system for WebAssembly (Wasm), thus extending the safety guarantees offered by Wasm with guarantees that applications manipulate sensitive data in a secure way. SecWasm is a hybrid system enforcing termination-insensitive noninterference which overcomes the challenges posed by the uncommon characteristics for machine languages of Wasm in an elegant and thorough way.},
    langid     = {english},
    location   = {Auckland, New Zealand}
}
@manual{IntelSGXmanual,
    author = {{Intel Corporation}},
    title  = {Intel Software Guard Extensions (Intel SGX) SDK for Linux OS},
    year   = {2023}
}
@inproceedings{interpreterhijeck,
    author    = {Qirui, Liu and Wenbo, Shen and Jinmeng, Zhou and Zhuoruo, Zhang and Jiayi, Hu and Shukai, Ni and Kangjie, Lu and Rui, Chang},
    title     = {Interp-flow Hijacking: Launching Non-control Data Attack via Hijacking eBPF Interpretation Flow},
    year      = {2024},
    publisher = {Springer-Verlag},
    address   = {Berlin, Germany},
    url       = {https://doi.org/10.1007/978-3-031-70896-1_10},
    doi       = {10.1007/978-3-031-70896-1_10},
    booktitle = {Computer Security – 29th European Symposium on Research in Computer Security, Bydgoszcz, Poland, September 16–20, 2024, Proceedings, Part III (ESORICS '24)},
    pages     = {194–214},
    numpages  = {21},
    address   = {Cham},
    keywords  = {eBPF, Bug exploitation, Linux kernel, Bypassing CFI}
}
@misc{isovalentEBPFDocs2024,
    title        = {{{eBPF Docs}}},
    author       = {{isovalent}},
    howpublished = {https://docs.ebpf.io/},
    url          = {https://github.com/isovalent/ebpf-docs},
    year         = {2025},
    langid       = {english}
}
@inproceedings{JangdaNotsoFast,
    title     = {Not so Fast: {{Analyzing}} the Performance of {{WebAssembly}} vs. Native Code},
    booktitle = {2019 {{USENIX}} Annual Technical Conference ({{USENIX ATC}} '19)},
    author    = {Jangda, Abhinav and Powers, Bobby and Berger, Emery D. and Guha, Arjun},
    year      = {2019},
    month     = jul,
    pages     = {107--120},
    publisher = {USENIX Association},
    address   = {Renton, America},
    langid    = {american}
}
@inproceedings{JayProvablySafe,
    author    = {Jay Bosamiya and Wen Shih Lim and Bryan Parno},
    title     = {{Provably-Safe} Multilingual Software Sandboxing using {WebAssembly}},
    booktitle = {31st USENIX Security Symposium (USENIX Security '22)},
    year      = {2022},
    address   = {Boston, America},
    pages     = {1975--1992},
    url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/bosamiya},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{jiaDetectingJVMJIT2023,
    title     = {Detecting {{JVM JIT Compiler Bugs}} via {{Exploring Two-Dimensional Input Spaces}}},
    booktitle = {2023 {{IEEE}}/{{ACM}} 45th {{International Conference}} on {{Software Engineering}} ({{ICSE}} '23)},
    author    = {Jia, Haoxiang and Wen, Ming and Xie, Zifan and Guo, Xiaochen and Wu, Rongxin and Sun, Maolin and Chen, Kang and Jin, Hai},
    year      = {2023},
    pages     = {43--55},
    publisher = {IEEE},
    address   = {Melbourne, Australia},
    isbn      = {978-1-6654-5701-9},
    langid    = {english}
}
@inproceedings{jiaKernelExtensionVerification2023,
    title     = {Kernel Extension Verification Is Untenable},
    booktitle = {Proceedings of the 19th {{Workshop}} on {{Hot Topics}} in {{Operating Systems}} (HOTOS '23)},
    author    = {Jia, Jinghao and Sahu, Raj and Oswald, Adam and Williams, Dan and Le, Michael V. and Xu, Tianyin},
    year      = {2023},
    month     = jun,
    pages     = {150--157},
    publisher = {ACM},
    address   = {Providence, America},
    doi       = {10.1145/3593856.3595892},
    urldate   = {2024-12-23},
    langid    = {english}
}

@mastersthesis{jiangResearchSecurityFeatures2023,
    title   = {高级语言程序编译到 WebAssembly 的  安全特性研究},
    author  = {江佩东},
    year    = {2023},
    address = {湖北武汉},
    langid  = {chinese},
    school  = {武汉大学}
}
@inproceedings{johnsonWaVeVerifiablySecure2023,
    title      = {{{WaVe}}: A Verifiably Secure {{WebAssembly}} Sandboxing Runtime},
    shorttitle = {{{WaVe}}},
    booktitle  = {2023 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{S&P}})},
    author     = {Johnson, Evan and Laufer, Evan and Zhao, Zijie and Gohman, Dan and Narayan, Shravan and Savage, Stefan and Stefan, Deian and Brown, Fraser},
    year       = {2023},
    month      = may,
    pages      = {2940--2955},
    publisher  = {IEEE},
    address    = {San Francisco, America},
    doi        = {10.1109/SP46215.2023.10179357},
    urldate    = {2024-11-26},
    copyright  = {https://doi.org/10.15223/policy-009},
    langid     = {english},
    keywords   = {runtime,wasm}
}
@article{JSEngineBugs,
    title   = {An Empirical Study on Bugs in {{JavaScript}} Engines},
    author  = {Wang, Ziyuan and Bu, Dexin and Wang, Nannan and Yu, Sijie and Gou, Shanyi and Sun, Aiyue},
    year    = {2023},
    month   = mar,
    journal = {Information and Software Technology},
    volume  = {155},
    number  = {C},
    pages   = {1--16},
    issn    = {09505849},
    doi     = {10.1016/j.infsof.2022.107105},
    urldate = {2025-01-03}
}
@inproceedings{kernelStorage,
    author    = {{Yuhong Zhong} and {Haoyu Li} and {YuJian Wu}  and {Ioannis Zarkadas} and {Jeffrey Tao} and {Evan Mesterhazy} and {Michael Makris} and {Junfeng Yang} and {Amy Tai} and {Ryan Stutsman} and {Asaf Cidon}},
    title     = {{XRP}: {In-Kernel} Storage Functions with {eBPF}},
    booktitle = {16th USENIX Symposium on Operating Systems Design and Implementation (OSDI '22)},
    year      = {2022},
    address   = {Carlsbad, Canada},
    pages     = {375--393},
    url       = {https://www.usenix.org/conference/osdi22/presentation/zhong},
    publisher = {USENIX Association},
    month     = jul
}

@misc{kernelv62ReleaseStatus,
    author = {{Eklektix Inc}},
    title  = {x86: Kernel IBT},
    url    = {https://lwn.net/ml/linux-kernel/20220224145138.952963315@infradead.org/},
    year   = {2023}
}

@misc{kim2024tiktagbreakingarmsmemory,
    title         = {TikTag: Breaking ARM's Memory Tagging Extension with Speculative Execution},
    author        = {Juhee Kim and Jinbum Park and Sihyeon Roh and Jaeyoung Chung and Youngjoo Lee and Taesoo Kim and Byoungyoung Lee},
    year          = {2024},
    eprint        = {2406.08719},
    archiveprefix = {arXiv},
    url           = {https://arxiv.org/abs/2406.08719}
}
@article{kolosickIsolationTaxationNearzerocost2022,
    title   = {Isolation without Taxation: Near-Zero-Cost Transitions for {{WebAssembly}} and {{SFI}}},
    author  = {Kolosick, Matthew and Narayan, Shravan and Johnson, Evan and Watt, Conrad and LeMay, Michael and Garg, Deepak and Jhala, Ranjit and Stefan, Deian},
    year    = {2022},
    month   = jan,
    journal = {Proceedings of the ACM on Programming Languages (PACMPL '22)},
    volume  = {6},
    number  = {POPL},
    pages   = {1--30},
    issn    = {2475-1421},
    doi     = {10.1145/3498688},
    urldate = {2025-03-18},
    langid  = {english}
}

@inproceedings{kuoVerifiedProgramsCan2022,
    title     = {Verified Programs Can Party: Optimizing Kernel Extensions via Post-Verification Merging},
    booktitle = {Proceedings of the {{Seventeenth European Conference}} on {{Computer Systems}} (EuroSys '22)},
    author    = {Kuo, Hsuan-Chi and Chen, Kai-Hsun and Lu, Yicheng and Williams, Dan and Mohan, Sibin and Xu, Tianyin},
    year      = {2022},
    month     = mar,
    pages     = {283--299},
    publisher = {ACM},
    address   = {Rennes, France},
    doi       = {10.1145/3492321.3519562},
    urldate   = {2024-12-24},
    abstract  = {Operating system (OS) extensions are more popular than ever. For example, Linux BPF is marketed as a ``superpower'' that allows user programs to be downloaded into the kernel, verified to be safe and executed at kernel hook points. So, BPF extensions have high performance and are often placed at performance-critical paths for tracing and filtering. However, although BPF extension programs execute in a shared kernel environment and are already individually verified, they are often executed independently in chains. We observe that the chain pattern has large performance overhead, due to indirect jumps penalized by security mitigations (e.g., Spectre), loops, and memory accesses. In this paper, we argue for a separation of concerns. We propose to decouple the execution of BPF extensions from their verification requirements---BPF extension programs can be collectively optimized, after each BPF extension program is individually verified and loaded into the shared kernel.},
    langid    = {english}
}
@misc{lattner2023LLVMarchitecture,
    title  = {The architecture of open source applications (Volume 1) LLVM},
    author = {Lattner, Chris},
    url    = {https://aosabook.org/en/v1/llvm.html},
    year   = {2023}
}
@inproceedings{lehmannEverythingOldNew,
    author    = {Daniel Lehmann and Johannes Kinder and Michael Pradel},
    title     = {Everything Old is New Again: Binary Security of {WebAssembly}},
    booktitle = {29th USENIX Security Symposium (USENIX Security '20)},
    year      = {2020},
    pages     = {217--234},
    url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann},
    publisher = {USENIX Association},
    address   = {New York, America},
    month     = aug
}
@misc{lehmannFuzzmFindingMemory2021,
    title         = {Fuzzm: {{Finding Memory Bugs}} through {{Binary-Only Instrumentation}} and {{Fuzzing}} of {{WebAssembly}}},
    shorttitle    = {Fuzzm},
    author        = {Lehmann, Daniel and Torp, Martin Toldam and Pradel, Michael},
    year          = {2021},
    month         = oct,
    number        = {arXiv:2110.15433},
    eprint        = {2110.15433},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2110.15433},
    urldate       = {2024-12-12},
    abstract      = {WebAssembly binaries are often compiled from memoryunsafe languages, such as C and C++. Because of WebAssembly's linear memory and missing protection features, e.g., stack canaries, source-level memory vulnerabilities are exploitable in compiled WebAssembly binaries, sometimes even more easily than in native code. This paper addresses the problem of detecting such vulnerabilities through the first binary-only fuzzer for WebAssembly. Our approach, called Fuzzm, combines canary instrumentation to detect overflows and underflows on the stack and the heap, an efficient coverage instrumentation, a WebAssembly VM, and the input generation algorithm of the popular AFL fuzzer. Besides as an oracle for fuzzing, our canaries also serve as a stand-alone binary hardening technique to prevent the exploitation of vulnerable binaries in production. We evaluate Fuzzm with 28 real-world WebAssembly binaries, some compiled from source and some found in the wild without source code. The fuzzer explores thousands of execution paths, triggers dozens of crashes, and performs hundreds of program executions per second. When used for binary hardening, the approach prevents previously published exploits against vulnerable WebAssembly binaries while imposing low runtime overhead.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {wasm}
}
@mastersthesis{lehmannProgramAnalysisWebAssembly2022,
    title        = {Program Analysis of {{WebAssembly}} Binaries},
    author       = {Lehmann, Daniel},
    year         = {2022},
    publisher    = {Universit{\"a}t Stuttgart},
    doi          = {10.18419/OPUS-12619},
    urldate      = {2025-01-07},
    university   = {Universit{\"a}t Stuttgart},
    collaborator = {{Universit{\"a}t Stuttgart}},
    copyright    = {info:eu-repo/semantics/openAccess},
    langid       = {english},
    location     = {Stuttgart Germany},
    keywords     = {004}
}
@inproceedings{lehmannWasabiFrameworkDynamically2019,
    title      = {Wasabi: {{A Framework}} for {{Dynamically Analyzing WebAssembly}}},
    shorttitle = {Wasabi},
    booktitle  = {Proceedings of the {{Twenty-Fourth International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}} (ASPLOS '19)},
    author     = {Lehmann, Daniel and Pradel, Michael},
    year       = {2019},
    month      = apr,
    pages      = {1045--1058},
    publisher  = {ACM},
    doi        = {10.1145/3297858.3304068},
    urldate    = {2024-11-28},
    langid     = {english},
    numpages   = {14},
    location   = {Providence, America}
}
@inproceedings{limSafeBPFHardwareassistedDefenseindepth2024,
    author    = {Lim, Soo Yee and Prasad, Tanya and Han, Xueyuan and Pasquier, Thomas},
    title     = {SafeBPF: Hardware-assisted Defense-in-depth for eBPF Kernel Extensions},
    year      = {2024},
    publisher = {ACM},
    url       = {https://doi.org/10.1145/3689938.3694781},
    doi       = {10.1145/3689938.3694781},
    booktitle = {Proceedings of the 2024 on Cloud Computing Security Workshop (CCSW '24)},
    pages     = {80–94},
    numpages  = {15},
    keywords  = {ebpf, mte, sandboxing},
    location  = {Salt Lake City, America}
}
@misc{limSOKAnalysisWeb2021,
    title     = {{{SOK}}: {{On}} the {{Analysis}} of {{Web Browser Security}}},
    author    = {Lim, Jungwon and Jin, Yonghwi and Alharthi, Mansour and Zhang, Xiaokuan and Jung, Jinho and Gupta, Rajat and Li, Kuilin and Jang, Daehee and Kim, Taesoo},
    year      = {2021},
    month     = dec,
    number    = {arXiv:2112.15561},
    publisher = {arXiv}
}
@inproceedings{limUnleashingUnprivilegedEBPF2023,
    title     = {Unleashing {{Unprivileged eBPF Potential}} with {{Dynamic Sandboxing}}},
    booktitle = {Proceedings of the 1st {{Workshop}} on {{eBPF}} and {{Kernel Extensions}} (eBPF '23)},
    author    = {{Soo Yee Lim} and {Xueyuan Han} and {Pasquier Thomas}},
    year      = {2023},
    month     = sep,
    pages     = {42--48},
    publisher = {ACM},
    address   = {New York, America},
    doi       = {10.1145/3609021.3609301},
    urldate   = {2024-12-03},
    langid    = {english},
    keywords  = {ebpf,sandbox}
}
@mastersthesis{LinuxEbpfProtection,
    title   = {{{Linux系统eBPF攻击建模及防护技术研究}}},
    author  = {{张子君}},
    year    = {2024},
    address = {浙江杭州},
    school  = {浙江大学}
}
@manual{LinuxkernelDocs,
    author = {The kernel development community},
    title  = {The Linux Kernel documentation},
    year   = {2024},
    url    = {https://docs.kernel.org/}
}

@inproceedings{llvm,
    author    = {Lattner, Chris and Adve, Vikram},
    title     = {LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation},
    year      = {2004},
    publisher = {IEEE Computer Society},
    booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization (CGO '04)},
    pages     = {75-86},
    location  = {Palo Alto, America}
}

@mastersthesis{llvmObfuscationForAndroid,
    author  = {江秋语},
    school  = {四川大学},
    address = {四川成都},
    title   = {基于LLVM的Android应用程序加固研究与实现},
    year    = {2021}
}
@manual{LLVMuserGuides,
    author = {LLVM Project},
    title  = {LLVM User Guides},
    year   = {2025},
    url    = {https://llvm.org/docs/UserGuides.html}
}
@inproceedings{maoMerlinMultitierOptimization2024,
    title     = {Merlin: {{Multi-tier Optimization}} of {{eBPF Code}} for {{Performance}} and {{Compactness}}},
    booktitle = {Proceedings of the 29th {{ACM International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}, {{Volume}} 3 (ASPLOS '24)},
    author    = {{Jinsong Mao} and {Hailun Ding} and {Juan Zhai} and {Shiqing Ma}},
    year      = {2024},
    month     = apr,
    pages     = {639--653},
    publisher = {ACM},
    doi       = {10.1145/3620666.3651387},
    urldate   = {2024-12-14},
    langid    = {english},
    keywords  = {eBPF optimization, LLVM},
    location  = {La Jolla, America}
}
@mastersthesis{MasterThesisARMPac,
    author  = {陈青松},
    school  = {武汉大学},
    address = {湖北武汉},
    title   = {基于ARM PAuth的内存防护研究},
    year    = {2021}
}
@inproceedings{menetreyWaTZTrustedWebAssembly2022,
    title      = {{{WaTZ}}: {{A Trusted WebAssembly Runtime Environment}} with {{Remote Attestation}} for {{TrustZone}}},
    shorttitle = {{{WaTZ}}},
    booktitle  = {2022 {{IEEE}} 42nd {{International Conference}} on {{Distributed Computing Systems}} ({{ICDCS}} '22)},
    author     = {Menetrey, James and Pasin, Marcelo and Felber, Pascal and Schiavoni, Valerio},
    year       = {2022},
    month      = jul,
    pages      = {1177--1189},
    publisher  = {IEEE},
    address    = {Bologna, Italy},
    doi        = {10.1109/ICDCS54860.2022.00116},
    urldate    = {2024-12-12},
    copyright  = {https://doi.org/10.15223/policy-029},
    langid     = {english}
}
@inproceedings{mohamedUnderstandingSecurityLinux2023,
    title     = {Understanding the {{Security}} of {{Linux eBPF Subsystem}}},
    booktitle = {Proceedings of the 14th {{ACM SIGOPS Asia-Pacific Workshop}} on {{Systems}} (APSys '23)},
    author    = {Mohamed Husain Noor and Wang, Xiaoguang and Ravindran, Binoy},
    year      = {2023},
    month     = aug,
    pages     = {87--92},
    publisher = {ACM},
    address   = {Seoul, Republic of Korea},
    doi       = {10.1145/3609510.3609822},
    urldate   = {2024-12-03},
    abstract  = {Linux eBPF allows a userspace application to execute code inside the Linux kernel without modifying the kernel code or inserting a kernel module. An in-kernel eBPF verifier preverifies any untrusted eBPF bytecode before running it in kernel context. Currently, users trust the verifier to block malicious bytecode from being executed.},
    langid    = {english},
    numpages  = {6},
    keywords  = {Linux eBPF, Kernel Security, Fuzzing}
}
@inproceedings{multitagOnArm,
    author    = {Unterguggenberger, Martin and Schrammel, David and Nasahl, Pascal and Schilling, Robert and Lamster, Lukas and Mangard, Stefan},
    title     = {Multi-Tag: A Hardware-Software Co-Design for Memory Safety based on Multi-Granular Memory Tagging},
    year      = {2023},
    publisher = {ACM},
    address   = {New York, America},
    url       = {https://doi.org/10.1145/3579856.3590331},
    doi       = {10.1145/3579856.3590331},
    booktitle = {Proceedings of the 2023 ACM Asia Conference on Computer and Communications Security (AsiaCCS '23)},
    pages     = {177–189},
    numpages  = {13},
    keywords  = {Memory Safety, Multi-Granular Tags, Tagged Memory Architecture}
}
@book{os3pieces,
    author    = {Arpaci-Dusseau, Remzi H. and Arpaci-Dusseau, Andrea C.},
    title     = {Operating Systems: Three Easy Pieces},
    year      = {2018},
    isbn      = {198508659X},
    publisher = {CreateSpace Independent Publishing Platform},
    address   = {North Charleston, SC, USA},
    abstract  = {OSTEP ("oh step"), or the "the comet book", represents the culmination of years of teaching intro to operating systems to both undergraduates and graduates at the University of Wisconsin-Madison Computer Sciences department for nearly 20 years. The book is organized around three concepts fundamental to OS construction: virtualization (of CPU and memory), concurrency (locks and condition variables), and persistence (disks, RAIDS, and file systems). The material, if combined with serious project work and homeworks, will lead students to a deeper understanding and appreciation of modern OSes. The authors, Remzi and Andrea Arpaci-Dusseau, are both professors of Computer Sciences at the University of Wisconsin-Madison. They have been doing research in computer systems for over 20 years, working together since their first graduate operating systems class at U.C. Berkeley in 1993. Since that time, they have published over 100 papers on the performance and reliability of many aspects of modern computer systems, with a special focus on file and storage systems. Their work has been recognized with numerous best-paper awards, and some of their innovations can be found in the Linux and BSD operating systems today.}
}
@inproceedings{parkEmpiricalStudyPrioritizing2019,
    title     = {An {{Empirical Study}} of {{Prioritizing JavaScript Engine Crashes}} via {{Machine Learning}}},
    booktitle = {Proceedings of the 2019 {{ACM Asia Conference}} on {{Computer}} and {{Communications Security}} (Asia CCS '19)},
    author    = {Park, Sunnyeo and Kim, Dohyeok and Son, Sooel},
    year      = {2019},
    month     = jul,
    pages     = {646--657},
    publisher = {ACM},
    address   = {Auckland, New Zealand},
    doi       = {10.1145/3321705.3329840},
    isbn      = {978-1-4503-6752-3}
}
@article{PKSeBPFIsolation,
    title   = {{基于PKS硬件特性的eBPF内存隔离机制}},
    author  = {{李浩} and {古金宇} and {夏虞斌} and {臧斌宇} and {陈海波}},
    year    = {2023},
    journal = {{软件学报}},
    volume  = {34},
    number  = {12},
    pages   = {5921--5939},
    issn    = {1000-9825},
    doi     = {10.13328/j.cnki.jos.006762},
    file    = {F:\Zotero\Data-storage\storage\SU86PK9Z\6762.pdf}
}
@misc{priebe2020sgxlklsecuringhostos,
    title  = {SGX-LKL: Securing the Host OS Interface for Trusted Execution},
    author = {Christian Priebe and Divya Muthukumaran and Joshua Lind and Huanzhou Zhu and Shujie Cui and Vasily A. Sartakov and Peter Pietzuch},
    year   = {2020},
    eprint = {1908.11143},
    url    = {https://arxiv.org/abs/1908.11143}
}
@inproceedings{ProofofJITeBPFvmForIoT,
    title     = {End-to-End Mechanized Proof of a {{JIT-accelerated eBPF}} Virtual Machine for {{IoT}}},
    booktitle = {Computer Aided Verification (CAV '24)},
    author    = {Yuan, Shenghao and Besson, Fr{\'e}d{\'e}ric and Talpin, Jean-Pierre},
    editor    = {Gurfinkel, Arie and Ganesh, Vijay},
    year      = {2024},
    pages     = {325--347},
    publisher = {Springer Nature Switzerland},
    address   = {Montreal, Canada},
    doi       = {10.1007/978-3-031-65627-9_16},
    langid    = {english}
}
@inproceedings{PutYourMemoryinWASM2023,
    title      = {Put {{Your Memory}} in {{Order}}: {{Efficient Domain-based Memory Isolation}} for {{WASM Applications}}},
    shorttitle = {Put {{Your Memory}} in {{Order}}},
    booktitle  = {Proceedings of the 2023 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}} (CCS '23)},
    author     = {{Hanwen Lei} and {Ziqi Zhang} and {Shaokun Zhang} and {Peng Jiang} and {Zhineng Zhong} and {Ningyu He} and {Ding Li} and {Yao Guo} and {Xiangqun Chen}},
    year       = {2023},
    month      = nov,
    pages      = {904--918},
    publisher  = {ACM},
    address    = {Copenhagen, Denmark},
    doi        = {10.1145/3576915.3623205},
    urldate    = {2025-04-09},
    langid     = {english}
}

@article{rayOverviewWebAssemblyIoT2023,
    title      = {An {{Overview}} of {{WebAssembly}} for {{IoT}}: {{Background}}, {{Tools}}, {{State-of-the-Art}}, {{Challenges}}, and {{Future Directions}}},
    shorttitle = {An {{Overview}} of {{WebAssembly}} for {{IoT}}},
    author     = {Ray, Partha Pratim},
    year       = {2023},
    month      = aug,
    journal    = {Future Internet},
    volume     = {15},
    number     = {8},
    pages      = {275--282},
    issn       = {1999-5903},
    doi        = {10.3390/fi15080275},
    urldate    = {2024-12-05},
    langid     = {english}
}
@inproceedings{ReZone,
    author    = {David Cerdeira and Jos{\'e} Martins and Nuno Santos and Sandro Pinto},
    title     = {{ReZone}: Disarming {TrustZone} with {TEE} Privilege Reduction},
    booktitle = {31st USENIX Security Symposium (USENIX Security '22)},
    year      = {2022},
    address   = {Boston, America},
    pages     = {2261--2279},
    url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/cerdeira},
    publisher = {USENIX Association},
    month     = aug
}
@book{riceLearningEBPFProgramming2023,
    title      = {Learning {{eBPF}}: Programming the {{Linux Kernel}} for Enhanced Observability, Networking, and Security},
    shorttitle = {Learning {{eBPF}}},
    author     = {Rice, Liz},
    year       = {2023},
    edition    = {First edition},
    publisher  = {O'Reilly Media},
    address    = {Sebastopol, CA},
    isbn       = {978-1-0981-3512-6},
    langid     = {english},
    lccn       = {005.3},
    keywords   = {Application software,Computer security,Development Automation,Linux,Open source software},
    annotation = {OCLC: on1353981026},
    file       = {F:\Zotero\Data-storage\storage\J9AXN9I3\Rice - 2023 - Learning eBPF programming the Linux Kernel for enhanced observability, networking, and security.pdf}
}
@inproceedings{romanoEmpiricalStudyBugs2021,
    title     = {An {{Empirical Study}} of {{Bugs}} in {{WebAssembly Compilers}}},
    booktitle = {2021 36th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} (ASE '21)},
    author    = {Romano, Alan and Liu, Xinyue and Kwon, Yonghwi and Wang, Weihang},
    year      = {2021},
    month     = nov,
    pages     = {42--54},
    publisher = {IEEE},
    address   = {Melbourne, Australia},
    doi       = {10.1109/ASE51524.2021.9678776},
    urldate   = {2024-12-11},
    langid    = {english},
    keywords  = {wasm}
}
@inproceedings{sahuEnablingBPFRuntime2023,
    title     = {Enabling {{BPF Runtime}} Policies for Better {{BPF}} Management},
    booktitle = {Proceedings of the 1st {{Workshop}} on {{eBPF}} and {{Kernel Extensions}} (eBPF '23)},
    author    = {Sahu, Raj and Williams, Dan},
    year      = {2023},
    month     = sep,
    pages     = {49--55},
    numpages  = {7},
    publisher = {ACM},
    address   = {New York, America},
    doi       = {10.1145/3609021.3609297},
    url       = {https://doi.org/10.1145/3609021.3609297},
    langid    = {english},
    keywords  = {orchestration, policy, eBPF}
}
@phdthesis{SecurityLuaSandbox2022,
    type    = {Bachelor's Thesis},
    title   = {Security of the {{Lua Sandbox}}},
    author  = {{Petr Ad{\'a}mek}},
    year    = {2022},
    langid  = {english},
    address = {Prague, Czech Republic},
    school  = {Czech Technical University in Prague}
}
@manual{SecurityModelOfwasm,
    author = {{WebAssembly Community}},
    title  = {The Security Model of Web Assembly},
    year   = {2025},
    url    = {https://webassembly.org/docs/security/}
}
@inproceedings{seemwasmSymbolicEngine,
    title      = {{{SeeWasm}}: {{An Efficient}} and {{Fully-Functional Symbolic Execution Engine}} for {{WebAssembly Binaries}}},
    shorttitle = {{{SeeWasm}}},
    booktitle  = {Proceedings of the 33rd {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}} (ISSTA '24)},
    author     = {He, Ningyu and Zhao, Zhehao and Guan, Hanqin and Wang, Jikai and Peng, Shuo and Li, Ding and Wang, Haoyu and Chen, Xiangqun and Guo, Yao},
    year       = {2024},
    month      = sep,
    pages      = {1816--1820},
    publisher  = {ACM},
    address    = {Vienna, Austria},
    doi        = {10.1145/3650212.3685300},
    urldate    = {2025-01-07},
    langid     = {english}
}
@misc{serebryany2019arm,
    title  = {ARM memory tagging extension and how it improves C/C++ memory safety},
    author = {Serebryany, Kostya},
    number = {5},
    url    = {https://www.usenix.org/system/files/login/articles/login_summer19_03_serebryany.pdf},
    year   = {2019}
}
@misc{skanehiraWrittingWasmRuntime2024,
    title    = {Writting a Wasm {{Runtime}} in {{Rust}}},
    author   = {{skanehira}},
    year     = {2024},
    month    = aug,
    langid   = {english},
    url      = {https://github.com/skanehira/writing-a-wasm-runtime-in-rust/},
    keywords = {front end compiler,runtime,wasm}
}
@inproceedings{sonoyamaPerformanceStudyKotlin2021,
    title     = {Performance {{Study}} of {{Kotlin}} and {{Java Program Considering Bytecode Instructions}} and {{JVM JIT Compiler}}},
    booktitle = {2021 {{Ninth International Symposium}} on {{Computing}} and {{Networking Workshops}} ({{CANDARW}} '21)},
    author    = {Sonoyama, Atsuya and Kamiyama, Takeshi and Oguchi, Masato and Yamaguchi, Saneyasu},
    year      = {2021},
    month     = nov,
    pages     = {127--133},
    publisher = {IEEE},
    address   = {Matsue, Japan},
    doi       = {10.1109/CANDARW53999.2021.00028},
    abstract  = {Java has been widely used in the information technology field such as smartphones and server-side software. Java language and its runtime environments, which is called the Java ecosystem, have been developed and improved for some decades. This has become a huge and sophisticated ecosystem. Therefore, optimizing software codes, such as bytecodes program, should be well matched for this eco-system. Recently, a new programing language, which is called Kotlin, based on JVM (Java virtual machine) was developed. Kotlin is a well-designed program language, but is newly proposed and may not be exhaustively optimized for this Java ecosystem. In this paper, we discuss the performances of programs that are written in Java and Kotlin languages based on this ecosystem implementation. We first evaluate the performances of the loop function, which is a basic function of programming languages, of these two languages, then show that the performance of Kotlin is less than that of Java in the case of subjectively typical and common description way. Also, we show that even the performance of Java is less in some cases. We seconds discuss the reason for these performance declines comparing the bytecodes that are output from compilers of these languages. We reveal a small difference in bytecode sequences causes a large performance change due to the optimizer of JIT (Just-in-time) compiler implementation. We third discuss a method for improving the performance by solving this issue. One of the easiest ways is translating a JVM bytecode file. Finally, we evaluate our performance improving method and show that the method can improve the performance by 33\% in the largest case.},
    isbn      = {978-1-6654-2835-4},
    langid    = {english}
}
@inproceedings{Staicu2018SYNODEUA,
    title     = {{{SYNODE}}: {{Understanding}} and Automatically Preventing Injection Attacks on Node.Js},
    booktitle = {Network and Distributed System Security Symposium (NDSS '18)},
    author    = {Staicu, Cristian-Alexandru and Pradel, Michael and Livshits, Benjamin},
    publisher = {The Internet Society},
    year      = {2018},
    pages     = {1--15},
    address   = {San Diego, America},
    url       = {https://api.semanticscholar.org/CorpusID:51951699},
    doi       = {https://doi.org/10.14722/ndss.2018.23076}
}
@inproceedings{sunFindingCorrectnessBugs2024,
    author    = {Sun, Hao and Xu, Yiru and Liu, Jianzhong and Shen, Yuheng and Guan, Nan and Jiang, Yu},
    title     = {Finding Correctness Bugs in eBPF Verifier with Structured and Sanitized Program},
    year      = {2024},
    publisher = {ACM},
    address   = {Athens, Greece},
    url       = {https://doi.org/10.1145/3627703.3629562},
    doi       = {10.1145/3627703.3629562},
    booktitle = {Proceedings of the Nineteenth European Conference on Computer Systems (EuroSys '24)},
    pages     = {689–703},
    numpages  = {15},
    keywords  = {OS Kernel, Testing, eBPF Verifier}
}
@inproceedings{swivel,
    title     = {Swivel: {{Hardening WebAssembly}} against Spectre},
    booktitle = {30th {{USENIX}} Security Symposium ({{USENIX}} Security '21)},
    author    = {Narayan, Shravan and Disselkoen, Craig and Moghimi, Daniel and Cauligi, Sunjay and Johnson, Evan and Gang, Zhao and {Vahldiek-Oberwagner}, Anjo and Sahita, Ravi and Shacham, Hovav and Tullsen, Dean and Stefan, Deian},
    year      = {2021},
    month     = aug,
    pages     = {1433--1450},
    publisher = {USENIX Association},
    address   = {New York, America}
}
@article{titzerFastInplaceInterpreter2022,
    author     = {Titzer, Ben L.},
    title      = {A fast in-place interpreter for WebAssembly},
    year       = {2022},
    issue_date = {October 2022},
    publisher  = {ACM},
    address    = {New York, NY, USA},
    url        = {https://doi.org/10.1145/3563311},
    doi        = {10.1145/3563311},
    volume     = {6},
    number     = {OOPSLA2},
    pages      = {1-27},
    abstract   = {WebAssembly (Wasm) is a compact, well-specified bytecode format that offers a portable compilation target with near-native execution speed. The bytecode format was specifically designed to be fast to parse, validate, and compile, positioning itself as a portable alternative to native code. It was pointedly not designed to be interpreted directly. Instead, design considerations at the time focused on competing with native code, utilizing optimizing compilers as the primary execution tier. Yet, in JIT scenarios, compilation time and memory consumption critically impact application startup, leading many Wasm engines to later deploy faster single-pass (baseline) compilers. Though faster, baseline compilers still take time and waste code space for infrequently executed code. A typical interpreter being infeasible, some engines resort to compiling Wasm not to machine code, but to a more compact, but easy to interpret format. This still takes time and wastes memory. Instead, we introduce in this article a fast in-place interpreter for WebAssembly, where no rewrite and no separate format is necessary. Our evaluation shows that in-place interpretation of Wasm code is space-efficient and fast, achieving performance on-par with interpreting a custom-designed internal format. This fills a hole in the execution tier space for Wasm, allowing for even faster startup and lower memory footprint than previous engine configurations.},
    journal    = {Proceedings of the ACM on Programming Languages (PACMPL '22)},
    month      = oct,
    articleno  = {148},
    numpages   = {27},
    keywords   = {Debugging, Instrumentation, Intepreters, Performance, WebAssembly}
}
@inproceedings{Twine,
    author    = {Ménétrey, Jämes and Pasin, Marcelo and Felber, Pascal and Schiavoni, Valerio},
    booktitle = {2021 IEEE 37th International Conference on Data Engineering (ICDE '21)},
    title     = {Twine: An Embedded Trusted Runtime for WebAssembly},
    year      = {2021},
    pages     = {205-216},
    publisher = {IEEE},
    address   = {Chania, Greece},
    keywords  = {Runtime environment;Databases;C++ languages;Libraries;Hardware;Outsourcing;Security;Software;Security;Databases;Cryptography;Privacy;TEE;SGX;WebAssembly;Runtime;SQLite},
    doi       = {10.1109/ICDE51399.2021.00025}
}
@article{vieiraFastPacketProcessing2021,
    title      = {Fast {{Packet Processing}} with {{eBPF}} and {{XDP}}: {{Concepts}}, {{Code}}, {{Challenges}}, and {{Applications}}},
    shorttitle = {Fast {{Packet Processing}} with {{eBPF}} and {{XDP}}},
    author     = {{Marcos A. M. Vieira} and {Matheus S. Castanho} and {Racyus D. G. Pac{\'i}fico} and {Elerson R. S. Santos} and {Eduardo P. M. C{\^a}mara J{\'u}nior} and {Luiz F. M. Vieira}},
    year       = {2021},
    month      = jan,
    journal    = {ACM Computing Surveys (CSUR '21)},
    volume     = {53},
    number     = {1},
    pages      = {1--36},
    issn       = {0360-0300, 1557-7341},
    doi        = {10.1145/3371038},
    urldate    = {2024-12-24},
    langid     = {english},
    file       = {F:\Zotero\Data-storage\storage\NU2YSIY9\Vieira 等 - 2021 - Fast Packet Processing with eBPF and XDP Concepts, Code, Challenges, and Applications.pdf}
}
@article{WangJuanSGXJiShuDeFenXiHeYanJiu2018,
    title   = {{SGX技术的分析和研究}},
    author  = {{王鹃} and {樊成阳} and {程越强} and {赵波} and {韦韬} and {严飞} and {张焕国} and {马婧}},
    year    = {2018},
    journal = {软件学报},
    volume  = {29},
    number  = {9},
    pages   = {2778-2798},
    langid  = {chinese}
}
@article{wangWAVENWebAssemblyMemory2025,
    title    = {{{WAVEN}}: {{WebAssembly Memory Virtualization}} for {{Enclaves}}},
    author   = {{Weili Wang} and {Honghan Ji} and {Peixuan He} and {Yao Zhang} and {Ye Wu} and {Yinqian Zhang}},
    year     = {2025},
    volume   = {1},
    number   = 1,
    pages    = {1--18},
    journal  = {Network and Distributed System Security Symposium (NDSS '25)},
    issn     = {979-8-9894372-8-3},
    doi      = {10.14722/ndss.2025.230746},
    langid   = {english},
    keywords = {intel SGX}
}
@inproceedings{WASAI,
    booktitle = {Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA '22)},
    author    = {{Weimin Chen} and {Zihan Sun} and {Haoyu Wang} and {Xiapu Luo} and {Haipeng Cai}},
    title     = {WASAI: uncovering vulnerabilities in Wasm smart contracts},
    year      = {2022},
    publisher = {ACM},
    address   = {New York, America},
    url       = {https://doi.org/10.1145/3533767.3534218},
    doi       = {10.1145/3533767.3534218},
    pages     = {703–715},
    numpages  = {13}
}
@inproceedings{waseemIssuesTheirCauses2024,
    author    = {Waseem, Muhammad and Das, Teerath and Ahmad, Aakash and Liang, Peng and Mikkonen, Tommi},
    title     = {Issues and Their Causes in WebAssembly Applications: An Empirical Study},
    year      = {2024},
    publisher = {ACM},
    address   = {New York, America},
    url       = {https://doi.org/10.1145/3661167.3661227},
    doi       = {10.1145/3661167.3661227},
    abstract  = {WebAssembly (Wasm) is a binary instruction format designed for secure and efficient execution within sandboxed environments - predominantly web apps and browsers - to facilitate performance, security, and flexibility of web programming languages. In recent years, Wasm has gained significant attention from the academic research community and industrial development projects to engineer high-performance web applications. Despite the offered benefits, developers encounter a multitude of issues rooted in Wasm (e.g., faults, errors, failures) and are often unaware of their root causes that impact the development of web applications. To this end, we conducted an empirical study that mines and documents practitioners’ knowledge expressed as 385 issues from 12 open-source Wasm projects deployed on GitHub and 354 question-answer posts via Stack Overflow. Overall, we identified 120 types of issues, which were categorized into 19 subcategories and 9 categories to create a taxonomical classification of issues encountered in Wasm-based applications. Furthermore, root cause analysis of the issues helped us identify 278 types of causes, which have been categorized into 29 subcategories and 10 categories as a taxonomy of causes. Our study led to first-of-its-kind taxonomies of the issues faced by developers and their underlying causes in Wasm-based applications. The issue-cause taxonomies - identified from GitHub and SO, offering empirically derived guidelines - can guide researchers and practitioners to design, develop, and refactor Wasm-based applications.},
    booktitle = {Proceedings of the 28th International Conference on Evaluation and Assessment in Software Engineering (EASE '24)},
    pages     = {170–180},
    numpages  = {11},
    keywords  = {Causes, Issues, Mining Software Repositories, Wasm, WebAssembly},
    location  = {Salerno, Italy}
}
@misc{WasmbpfStreamliningEBPF2024,
    title      = {Wasm-Bpf: {{Streamlining eBPF Deployment}} in {{Cloud Environments}} with {{WebAssembly}}},
    shorttitle = {Wasm-Bpf},
    author     = {{Yusheng Zheng} and {Tong Yu} and {Yiwei Yang} and {Andrew Quinn}},
    year       = {2024},
    month      = aug,
    number     = {arXiv:2408.04856}
}
@book{wasmcoretech,
    title     = {{WebAssembly原理与核心技术}},
    author    = {{张秀宏}},
    year      = {2020},
    publisher = {机械工业出版社},
    address   = {北京},
    urldate   = {2024-12-12},
    isbn      = {978-7-111-66554-0},
    langid    = {chinese}
}
@manual{wasmDynlink,
    author = {{WebAssembly Community}},
    title  = {WebAssembly Dynamic Linking},
    url    = {https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md},
    year   = {2025}
}
@inproceedings{WASMDYPA,
    title      = {{{WASMDYPA}}: {{Effectively Detecting WebAssembly Bugs}} via {{Dynamic Program Analysis}}},
    shorttitle = {{{WASMDYPA}}},
    booktitle  = {2024 {{IEEE International Conference}} on {{Software Analysis}}, {{Evolution}} and {{Reengineering}} (SANER '24)},
    author     = {{Wenlong Zheng} and {Baojian Hua}},
    year       = {2024},
    month      = mar,
    pages      = {296--307},
    publisher  = {IEEE},
    address    = {Rovaniemi, Finland},
    doi        = {10.1109/SANER60148.2024.00037},
    urldate    = {2024-12-28},
    copyright  = {https://doi.org/10.15223/policy-029},
    langid     = {english}
}
@article{wasmIntelSGX,
    title     = {A {{Comprehensive Trusted Runtime}} for {{WebAssembly With Intel SGX}}},
    author    = {M{\'e}n{\'e}trey, J{\"a}mes and Pasin, Marcelo and Felber, Pascal and Schiavoni, Valerio and Mazzeo, Giovanni and Hollum, Arne and Vaydia, Darshan},
    year      = {2024},
    month     = jul,
    journal   = {IEEE Transactions on Dependable and Secure Computing (TDSC '24)},
    volume    = {21},
    number    = {4},
    pages     = {3562--3579},
    issn      = {1545-5971},
    doi       = {10.1109/TDSC.2023.3334516},
    urldate   = {2024-12-13},
    copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\Y9RN8XXD\Ménétrey 等 - 2024 - A Comprehensive Trusted Runtime for WebAssembly With Intel SGX.pdf}
}
@inproceedings{watt,
    author    = {Watt, Conrad},
    title     = {Mechanising and verifying the WebAssembly specification},
    year      = {2018},
    publisher = {ACM},
    address   = {New York, America},
    url       = {https://doi.org/10.1145/3167082},
    doi       = {10.1145/3167082},
    booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs (CPP '18)},
    pages     = {53–65},
    numpages  = {13},
    keywords  = {bytecode, reduction, soundness, stack machine}
}
@article{WebAssemblySummaryOnSecurity,
    title   = {{WebAssembly安全研究综述}},
    journal = {{计算机研究与发展}},
    volume  = {61},
    number  = {8},
    pages   = {1-27},
    year    = {2024},
    doi     = {https://doi.org/10.7544/issn1000-1239.202330049},
    url     = {https://crad.ict.ac.cn/cn/article/doi/10.7544/issn1000-1239.202330049},
    author  = {{庄骏杰} and {胡霜} and {华保健} and {汪炀} and {潘志中}}
}
@inproceedings{yanUnderstandingPerformanceWebassembly2021,
    title     = {Understanding the Performance of Webassembly Applications},
    booktitle = {Proceedings of the 21st {{ACM Internet Measurement Conference}} (IMC '21)},
    author    = {{Yutian Yan} and {Tengfei Tu} and {Lijian Zhao} and {Yuchen Zhou} and {Weihang Wang}},
    year      = {2021},
    month     = nov,
    pages     = {533--549},
    publisher = {ACM},
    address   = {New York, America},
    doi       = {10.1145/3487552.3487827},
    urldate   = {2024-12-12},
    langid    = {english}
}
@inproceedings{YIHeCrossContainer,
    author    = {{Yi He} and {Roland Guo} and {Yunlong Xing} and {Xijia Che} and {Kun Sun} and {Zhuotao Liu} and {Ke Xu} and {Qi Li}},
    title     = {Cross Container Attacks: The Bewildered {eBPF} on Clouds},
    booktitle = {32nd USENIX Security Symposium (USENIX Security '23)},
    year      = {2023},
    address   = {Anaheim, Canada},
    pages     = {5971--5988},
    url       = {https://www.usenix.org/conference/usenixsecurity23/presentation/he},
    publisher = {USENIX Association},
    month     = aug
}
@article{zhangCharacterizingDetectingWebAssembly2024,
    title    = {Characterizing and {{Detecting WebAssembly Runtime Bugs}}},
    author   = {{Yixuan Zhang} and {Shangtong Cao} and {Haoyu Wang} and {Zhenpeng Chen} and {Xiapu Luo} and {Dongliang Mu} and {Yun Ma} and {Gang Huang} and {Xuanzhe Liu}},
    year     = {2024},
    month    = feb,
    journal  = {ACM Transactions on Software Engineering and Methodology (TOSEM '24)},
    volume   = {33},
    number   = {2},
    pages    = {1--29},
    issn     = {1049-331X},
    doi      = {10.1145/3624743},
    urldate  = {2024-12-11},
    langid   = {english},
    keywords = {bug,runtime,wasm}
}
@article{zhangResearchWebAssemblyRuntimes2024,
    author    = {{Yixuan Zhang} and {Mugeng Liu} and {Haoyu Wang} and {Yun Ma} and {Gang Huang} and {Xuanzhe Liu}},
    title     = {Research on WebAssembly Runtimes: A Survey},
    year      = {2025},
    publisher = {ACM},
    address   = {New York, NY, USA},
    issn      = {1049-331X},
    pages     = {1-46},
    number    = {1},
    volume    = {1},
    url       = {https://doi.org/10.1145/3714465},
    doi       = {10.1145/3714465},
    abstract  = {WebAssembly (abbreviated as Wasm) was initially introduced for the Web and quickly extended its reach into various domains beyond the Web. To create Wasm applications, developers can compile high-level programming languages into Wasm binaries or manually write the textual format of Wasm and translate it into Wasm binaries by the toolchain. Regardless of whether it is utilized within or outside the Web, the execution of Wasm binaries is supported by the Wasm runtime. Such a runtime provides a secure, memory-efficient, and sandboxed execution environment to execute Wasm binaries. This paper provides a comprehensive survey of research on Wasm runtimes with 103 collected research papers related to Wasm runtimes following the traditional systematic literature review process. It characterizes existing studies from two different angles, including the internal research of Wasm runtimes (Wasm runtime design, testing, and analysis) and the external research (applying Wasm runtimes to various domains). This paper also proposes future research directions about Wasm runtimes.},
    note      = {Just Accepted},
    journal   = {ACM Transactions on Software Engineering and Methodology (TOSEM '25)},
    month     = jan,
    keywords  = {WebAssembly, WebAssembly runtime, WebAssembly System Interface}
}
@inproceedings{zhangVMCanaryEffectiveMemory2023,
    title      = {{{VMCanary}}: {{Effective Memory Protection}} for {{WebAssembly}} via {{Virtual Machine-assisted Approach}}},
    shorttitle = {{{VMCanary}}},
    booktitle  = {2023 {{IEEE}} 23rd {{International Conference}} on {{Software Quality}}, {{Reliability}}, and {{Security}} (QRS '23)},
    author     = {{Ziyao Zhang} and {Wenlong Zheng} and {Baojian Hua} and {Qiliang Fan} and {Zhizhong Pan}},
    year       = {2023},
    month      = oct,
    pages      = {662--671},
    publisher  = {IEEE},
    address    = {Chiang Mai, Thailand},
    doi        = {10.1109/QRS60937.2023.00070},
    urldate    = {2024-12-13},
    copyright  = {https://doi.org/10.15223/policy-029},
    langid     = {english}
}
@inproceedings{zhangWasmCFuzzStructureawareFuzzing2024,
    title      = {{{WasmCFuzz}}: {{Structure-aware Fuzzing}} for {{Wasm Compilers}}},
    shorttitle = {{{WasmCFuzz}}},
    booktitle  = {2024 IEEE/ACM 4th International Workshop on Engineering and Cybersecurity of Critical Systems and 2024 IEEE/ACM Second International Workshop on Software Vulnerability (EnCyCriS/SVM '24)},
    author     = {{Xiangwei Zhang} and {Junjie Wang} and {Xiaoning Du} and {Shuang Liu}},
    year       = {2024},
    month      = apr,
    pages      = {1--5},
    publisher  = {ACM},
    address    = {Lisbon, Portugal},
    doi        = {10.1145/3643662.3643959},
    urldate    = {2025-03-21},
    langid     = {english}
}
@misc{zhengBpftimeUserspaceEBPF2023,
    title      = {Bpftime: Userspace {{eBPF Runtime}} for {{Uprobe}}, {{Syscall}} and {{Kernel-User Interactions}}},
    shorttitle = {Bpftime},
    author     = {{Yusheng Zheng} and {Tong Yu} and {Yiwei Yang} and {Yanpeng Hu} and {Xiaozheng Lai} and {Andrew Quinn}},
    year       = {2023},
    month      = dec,
    number     = {arXiv:2311.07923}
}
@article{zhengVMMattersComparison2021,
    author     = {{Yixuan Zhang} and {Shuyu Zheng} and {Haoyu Wang} and {Lei Wu} and {Gang Huang} and {Xuanzhe Liu}},
    title      = {VM Matters: A Comparison of WASM VMs and EVMs in the Performance of Blockchain Smart Contracts},
    year       = {2024},
    issue_date = {June 2024},
    publisher  = {ACM},
    address    = {New York, NY, USA},
    volume     = {9},
    number     = {2},
    issn       = {2376-3639},
    url        = {https://doi.org/10.1145/3641103},
    doi        = {10.1145/3641103},
    abstract   = {Beyond an emerging popular web applications runtime supported in almost all commodity browsers, WebAssembly (WASM) is further regarded to be the next-generation execution environment for blockchain-based applications. Indeed, many popular blockchain platforms such as EOSIO and NEAR have adopted WASM-based execution engines. Most recently, WASM has been favored by Ethereum, the largest smart contract platform, to replace the state-of-the-art EVM. However, whether and how well current WASM outperforms EVM on blockchain clients is still unknown. This article conducts the first measurement study to understand the performance on WASM VMs and EVM for executing smart contracts for blockchain-based applications. To our surprise, the current WASM VM does not provide expected satisfactory performance. The overhead introduced by WASM is really non-trivial. Our results shed the light on challenges when deploying WASM in practice, and provide insightful implications for improvement space.},
    journal    = {ACM Transactions on Modeling and Performance Evaluation of Computing Systems (ToMPECS '24)},
    month      = mar,
    pages      = {1--24},
    keywords   = {WebAssembly, blockchain, and smart contract}
}